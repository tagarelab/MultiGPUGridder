#ifndef MULTI_GPU_GRIDDER_H // Only define the header once
#define MULTI_GPU_GRIDDER_H

#include "MemoryManager.h"
#include "gpuForwardProject.h"
#include "gpuBackProject.h"

#include <cstdlib>
#include <stdio.h>
#include <cmath>

#include <iostream>
#include <vector>
#include <limits>
#include <algorithm>

// Include the CUDA Runtime
#include <cuda_runtime.h>
#include <cuda.h>

// NVTX labeling tools (for the nvidia profiling)
//#include <nvToolsExt.h>
#include <cuda_profiler_api.h>

class MultiGPUGridder
{

public:
	// Number of GPUs to use with the CUDA kernel
	int numGPUs = 1; // Default is 1

	// Number of kernel batches to perform
	int nBatches = 1;

	// Output image size parameter
	int *imgSize = new int[3];

	// Interpolation factor
	int interpFactor = 1;

	// Mask radius parameter
	float *maskRadius;

	// Size of the coordinate axes
	int *axesSize;

	// Size of the volume
	int *volSize;

	// Number of CUDA streams to use with the CUDA kernel
	int nStreams = 1;

	// Size of the Kaiser bessel vector
	int kerSize = 501;

	// Width of the Kaiser bessel function
	float kerHWidth = 2;

	// Kaiser bessel window function array of predefined values
	float ker_bessel_Vector[501] = {0, 4.7666021e-05, 9.9947727e-05, 0.00015710578, 0.00021940906, 0.00028713472, 0.00036056826, 0.00044000358, 0.000525743, 0.00061809726, 0.00071738561, 0.00082393584, 0.00093808415, 0.0010601754, 0.0011905626, 0.0013296079, 0.0014776813, 0.0016351618, 0.0018024362, 0.0019799001, 0.0021679574, 0.0023670201, 0.0025775086, 0.0027998511, 0.0030344841, 0.0032818518, 0.0035424063, 0.0038166076, 0.004104923, 0.0044078273, 0.0047258027, 0.0050593382, 0.0054089306, 0.0057750829, 0.0061583039, 0.0065591107, 0.0069780252, 0.0074155759, 0.0078722965, 0.0083487276, 0.0088454131, 0.0093629034, 0.0099017536, 0.010462523, 0.011045775, 0.011652078, 0.012282003, 0.012936124, 0.01361502, 0.014319269, 0.015049456, 0.015806165, 0.016589981, 0.017401494, 0.018241292, 0.019109964, 0.020008098, 0.020936286, 0.021895116, 0.022885174, 0.023907047, 0.024961319, 0.026048571, 0.027169384, 0.028324334, 0.029513991, 0.030738926, 0.0319997, 0.033296872, 0.034630999, 0.036002625, 0.03741229, 0.038860526, 0.040347867, 0.041874826, 0.04344191, 0.045049626, 0.046698466, 0.04838891, 0.050121427, 0.051896479, 0.053714518, 0.055575978, 0.057481285, 0.059430853, 0.061425079, 0.063464351, 0.065549031, 0.06767948, 0.06985604, 0.072079033, 0.074348763, 0.076665528, 0.079029597, 0.081441231, 0.08390066, 0.086408108, 0.088963777, 0.091567844, 0.094220467, 0.096921794, 0.099671938, 0.10247099, 0.10531905, 0.10821614, 0.11116232, 0.11415757, 0.11720191, 0.12029527, 0.12343761, 0.12662882, 0.12986881, 0.13315745, 0.13649455, 0.13987994, 0.14331342, 0.14679474, 0.15032363, 0.1538998, 0.15752295, 0.16119272, 0.16490874, 0.16867061, 0.17247792, 0.17633021, 0.18022698, 0.18416776, 0.18815197, 0.19217908, 0.19624849, 0.20035958, 0.2045117, 0.20870419, 0.21293631, 0.21720737, 0.22151661, 0.22586322, 0.23024639, 0.23466532, 0.2391191, 0.24360684, 0.24812764, 0.25268054, 0.25726455, 0.26187873, 0.26652199, 0.2711933, 0.2758916, 0.28061575, 0.28536466, 0.2901372, 0.29493213, 0.2997483, 0.30458447, 0.30943942, 0.31431186, 0.31920055, 0.32410413, 0.32902128, 0.33395067, 0.33889091, 0.34384063, 0.34879845, 0.35376289, 0.35873255, 0.36370599, 0.3686817, 0.37365818, 0.37863398, 0.38360757, 0.38857737, 0.3935419, 0.39849958, 0.40344885, 0.40838817, 0.41331589, 0.41823044, 0.42313024, 0.42801368, 0.43287915, 0.43772501, 0.44254965, 0.44735143, 0.45212874, 0.45687994, 0.4616034, 0.46629748, 0.47096053, 0.47559094, 0.48018709, 0.48474735, 0.48927006, 0.49375367, 0.49819651, 0.50259697, 0.50695354, 0.5112645, 0.51552838, 0.51974356, 0.52390844, 0.52802157, 0.53208143, 0.53608638, 0.54003495, 0.5439257, 0.54775715, 0.55152786, 0.55523634, 0.55888116, 0.56246096, 0.56597435, 0.56942004, 0.57279658, 0.57610273, 0.57933718, 0.58249867, 0.58558595, 0.58859777, 0.59153306, 0.59439057, 0.59716916, 0.59986782, 0.60248536, 0.60502082, 0.60747313, 0.60984135, 0.6121245, 0.61432171, 0.61643207, 0.61845469, 0.62038887, 0.62223369, 0.62398845, 0.62565249, 0.6272251, 0.62870562, 0.63009351, 0.63138813, 0.63258898, 0.6336956, 0.63470745, 0.63562423, 0.63644552, 0.63717103, 0.63780034, 0.63833326, 0.63876963, 0.63910919, 0.63935184, 0.63949746, 0.63954604, 0.63949746, 0.63935184, 0.63910919, 0.63876963, 0.63833326, 0.63780034, 0.63717103, 0.63644552, 0.63562423, 0.63470745, 0.6336956, 0.63258898, 0.63138813, 0.63009351, 0.62870562, 0.6272251, 0.62565249, 0.62398845, 0.62223369, 0.62038887, 0.61845469, 0.61643207, 0.61432171, 0.6121245, 0.60984135, 0.60747313, 0.60502082, 0.60248536, 0.59986782, 0.59716916, 0.59439057, 0.59153306, 0.58859777, 0.58558595, 0.58249867, 0.57933718, 0.57610273, 0.57279658, 0.56942004, 0.56597435, 0.56246096, 0.55888116, 0.55523634, 0.55152786, 0.54775715, 0.5439257, 0.54003495, 0.53608638, 0.53208143, 0.52802157, 0.52390844, 0.51974356, 0.51552838, 0.5112645, 0.50695354, 0.50259697, 0.49819651, 0.49375367, 0.48927006, 0.48474735, 0.48018709, 0.47559094, 0.47096053, 0.46629748, 0.4616034, 0.45687994, 0.45212874, 0.44735143, 0.44254965, 0.43772501, 0.43287915, 0.42801368, 0.42313024, 0.41823044, 0.41331589, 0.40838817, 0.40344885, 0.39849958, 0.3935419, 0.38857737, 0.38360757, 0.37863398, 0.37365818, 0.3686817, 0.36370599, 0.35873255, 0.35376289, 0.34879845, 0.34384063, 0.33889091, 0.33395067, 0.32902128, 0.32410413, 0.31920055, 0.31431186, 0.30943942, 0.30458447, 0.2997483, 0.29493213, 0.2901372, 0.28536466, 0.28061575, 0.2758916, 0.2711933, 0.26652199, 0.26187873, 0.25726455, 0.25268054, 0.24812764, 0.24360684, 0.2391191, 0.23466532, 0.23024639, 0.22586322, 0.22151661, 0.21720737, 0.21293631, 0.20870419, 0.2045117, 0.20035958, 0.19624849, 0.19217908, 0.18815197, 0.18416776, 0.18022698, 0.17633021, 0.17247792, 0.16867061, 0.16490874, 0.16119272, 0.15752295, 0.1538998, 0.15032363, 0.14679474, 0.14331342, 0.13987994, 0.13649455, 0.13315745, 0.12986881, 0.12662882, 0.12343761, 0.12029527, 0.11720191, 0.11415757, 0.11116232, 0.10821614, 0.10531905, 0.10247099, 0.099671938, 0.096921794, 0.094220467, 0.091567844, 0.088963777, 0.086408108, 0.08390066, 0.081441231, 0.079029597, 0.076665528, 0.074348763, 0.072079033, 0.06985604, 0.06767948, 0.065549031, 0.063464351, 0.061425079, 0.059430853, 0.057481285, 0.055575978, 0.053714518, 0.051896479, 0.050121427, 0.04838891, 0.046698466, 0.045049626, 0.04344191, 0.041874826, 0.040347867, 0.038860526, 0.03741229, 0.036002625, 0.034630999, 0.033296872, 0.0319997, 0.030738926, 0.029513991, 0.028324334, 0.027169384, 0.026048571, 0.024961319, 0.023907047, 0.022885174, 0.021895116, 0.020936286, 0.020008098, 0.019109964, 0.018241292, 0.017401494, 0.016589981, 0.015806165, 0.015049456, 0.014319269, 0.01361502, 0.012936124, 0.012282003, 0.011652078, 0.011045775, 0.010462523, 0.0099017536, 0.0093629034, 0.0088454131, 0.0083487276, 0.0078722965, 0.0074155759, 0.0069780252, 0.0065591107, 0.0061583039, 0.0057750829, 0.0054089306, 0.0050593382, 0.0047258027, 0.0044078273, 0.004104923, 0.0038166076, 0.0035424063, 0.0032818518, 0.0030344841, 0.0027998511, 0.0025775086, 0.0023670201, 0.0021679574, 0.0019799001, 0.0018024362, 0.0016351618, 0.0014776813, 0.0013296079, 0.0011905626, 0.0010601754, 0.00093808415, 0.00082393584, 0.00071738561, 0.00061809726, 0.000525743, 0.00044000358, 0.00036056826, 0.00028713472, 0.00021940906, 0.00015710578, 9.9947727e-05, 4.7666021e-05, 0};

	// float ker_bessel_Vector[501] = {0, 0, 0.0001, 0.0002, 0.0002, 0.0003, 0.0004, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008, 0.0009, 0.0011, 0.0012, 0.0013, 0.0015, 0.0016, 0.0018, 0.002, 0.0022, 0.0024, 0.0026, 0.0028, 0.003, 0.0033, 0.0035, 0.0038, 0.0041, 0.0044, 0.0047, 0.0051, 0.0054, 0.0058, 0.0062, 0.0066, 0.007, 0.0074, 0.0079, 0.0083, 0.0088, 0.0094, 0.0099, 0.0105, 0.011, 0.0117, 0.0123, 0.0129, 0.0136, 0.0143, 0.015, 0.0158, 0.0166, 0.0174, 0.0182, 0.0191, 0.02, 0.0209, 0.0219, 0.0229, 0.0239, 0.025, 0.026, 0.0272, 0.0283, 0.0295, 0.0307, 0.032, 0.0333, 0.0346, 0.036, 0.0374, 0.0389, 0.0403, 0.0419, 0.0434, 0.045, 0.0467, 0.0484, 0.0501, 0.0519, 0.0537, 0.0556, 0.0575, 0.0594, 0.0614, 0.0635, 0.0655, 0.0677, 0.0699, 0.0721, 0.0743, 0.0767, 0.079, 0.0814, 0.0839, 0.0864, 0.089, 0.0916, 0.0942, 0.0969, 0.0997, 0.1025, 0.1053, 0.1082, 0.1112, 0.1142, 0.1172, 0.1203, 0.1234, 0.1266, 0.1299, 0.1332, 0.1365, 0.1399, 0.1433, 0.1468, 0.1503, 0.1539, 0.1575, 0.1612, 0.1649, 0.1687, 0.1725, 0.1763, 0.1802, 0.1842, 0.1882, 0.1922, 0.1962, 0.2004, 0.2045, 0.2087, 0.2129, 0.2172, 0.2215, 0.2259, 0.2302, 0.2347, 0.2391, 0.2436, 0.2481, 0.2527, 0.2573, 0.2619, 0.2665, 0.2712, 0.2759, 0.2806, 0.2854, 0.2901, 0.2949, 0.2997, 0.3046, 0.3094, 0.3143, 0.3192, 0.3241, 0.329, 0.334, 0.3389, 0.3438, 0.3488, 0.3538, 0.3587, 0.3637, 0.3687, 0.3737, 0.3786, 0.3836, 0.3886, 0.3935, 0.3985, 0.4034, 0.4084, 0.4133, 0.4182, 0.4231, 0.428, 0.4329, 0.4377, 0.4425, 0.4474, 0.4521, 0.4569, 0.4616, 0.4663, 0.471, 0.4756, 0.4802, 0.4847, 0.4893, 0.4938, 0.4982, 0.5026, 0.507, 0.5113, 0.5155, 0.5197, 0.5239, 0.528, 0.5321, 0.5361, 0.54, 0.5439, 0.5478, 0.5515, 0.5552, 0.5589, 0.5625, 0.566, 0.5694, 0.5728, 0.5761, 0.5793, 0.5825, 0.5856, 0.5886, 0.5915, 0.5944, 0.5972, 0.5999, 0.6025, 0.605, 0.6075, 0.6098, 0.6121, 0.6143, 0.6164, 0.6185, 0.6204, 0.6222, 0.624, 0.6257, 0.6272, 0.6287, 0.6301, 0.6314, 0.6326, 0.6337, 0.6347, 0.6356, 0.6364, 0.6372, 0.6378, 0.6383, 0.6388, 0.6391, 0.6394, 0.6395, 0.6395, 0.6395, 0.6394, 0.6391, 0.6388, 0.6383, 0.6378, 0.6372, 0.6364, 0.6356, 0.6347, 0.6337, 0.6326, 0.6314, 0.6301, 0.6287, 0.6272, 0.6257, 0.624, 0.6222, 0.6204, 0.6185, 0.6164, 0.6143, 0.6121, 0.6098, 0.6075, 0.605, 0.6025, 0.5999, 0.5972, 0.5944, 0.5915, 0.5886, 0.5856, 0.5825, 0.5793, 0.5761, 0.5728, 0.5694, 0.566, 0.5625, 0.5589, 0.5552, 0.5515, 0.5478, 0.5439, 0.54, 0.5361, 0.5321, 0.528, 0.5239, 0.5197, 0.5155, 0.5113, 0.507, 0.5026, 0.4982, 0.4938, 0.4893, 0.4847, 0.4802, 0.4756, 0.471, 0.4663, 0.4616, 0.4569, 0.4521, 0.4474, 0.4425, 0.4377, 0.4329, 0.428, 0.4231, 0.4182, 0.4133, 0.4084, 0.4034, 0.3985, 0.3935, 0.3886, 0.3836, 0.3786, 0.3737, 0.3687, 0.3637, 0.3587, 0.3538, 0.3488, 0.3438, 0.3389, 0.334, 0.329, 0.3241, 0.3192, 0.3143, 0.3094, 0.3046, 0.2997, 0.2949, 0.2901, 0.2854, 0.2806, 0.2759, 0.2712, 0.2665, 0.2619, 0.2573, 0.2527, 0.2481, 0.2436, 0.2391, 0.2347, 0.2302, 0.2259, 0.2215, 0.2172, 0.2129, 0.2087, 0.2045, 0.2004, 0.1962, 0.1922, 0.1882, 0.1842, 0.1802, 0.1763, 0.1725, 0.1687, 0.1649, 0.1612, 0.1575, 0.1539, 0.1503, 0.1468, 0.1433, 0.1399, 0.1365, 0.1332, 0.1299, 0.1266, 0.1234, 0.1203, 0.1172, 0.1142, 0.1112, 0.1082, 0.1053, 0.1025, 0.0997, 0.0969, 0.0942, 0.0916, 0.089, 0.0864, 0.0839, 0.0814, 0.079, 0.0767, 0.0743, 0.0721, 0.0699, 0.0677, 0.0655, 0.0635, 0.0614, 0.0594, 0.0575, 0.0556, 0.0537, 0.0519, 0.0501, 0.0484, 0.0467, 0.045, 0.0434, 0.0419, 0.0403, 0.0389, 0.0374, 0.036, 0.0346, 0.0333, 0.032, 0.0307, 0.0295, 0.0283, 0.0272, 0.026, 0.025, 0.0239, 0.0229, 0.0219, 0.0209, 0.02, 0.0191, 0.0182, 0.0174, 0.0166, 0.0158, 0.015, 0.0143, 0.0136, 0.0129, 0.0123, 0.0117, 0.011, 0.0105, 0.0099, 0.0094, 0.0088, 0.0083, 0.0079, 0.0074, 0.007, 0.0066, 0.0062, 0.0058, 0.0054, 0.0051, 0.0047, 0.0044, 0.0041, 0.0038, 0.0035, 0.0033, 0.003, 0.0028, 0.0026, 0.0024, 0.0022, 0.002, 0.0018, 0.0016, 0.0015, 0.0013, 0.0012, 0.0011, 0.0009, 0.0008, 0.0007, 0.0006, 0.0005, 0.0004, 0.0004, 0.0003, 0.0002, 0.0002, 0.0001, 0, 0 };


	// Number of coordinate axes to process for each stream
	std::vector<int> numAxesPerStream;

	// Create a MemoryManager class object for allocating, copying, and transferring array to  CPU, GPU, or Matlab memory
	MemoryManager *Mem_obj;

	// Constructor/Destructor
	MultiGPUGridder();
	~MultiGPUGridder(){};

	// Output all of the parameters to the console (very useful for debugging)
	void Print();

	// Set the number of GPUs to use with the CUDA kernel
	void SetNumberGPUs(int numGPUs);

	// Set the number of streams to use with the CUDA kernel
	void SetNumberStreams(int nStreams);

	// Set the number of batches to use with the CUDA kernel
	void SetNumberBatches(int nBatches);

	// Set GPU volume
	void SetVolume(float *gpuVol, int *gpuVolSize);

	// Set the GPU volume size
	void SetVolumeSize(int gpuVolSize);

	// Set the interpolation factor parameter
	void SetInterpFactor(float interpFactor);

	// Convert the GPU volume to CAS volume
	void ConvertVolToCASVol();

	// Get the volume from all the GPUs and return their summation
	float *GetVolume();

	// Reset the GPU volumes on all the GPUs
	void ResetVolume();

	// Set CAS Imgs array
	void SetImages(float *newCASImgs);

	// Get the CAS Imgs array
	float *GetImages();

	// Set coordinate axes
	void SetAxes(float *coordAxes, int *axesSize);

	// Set the kaiser bessel vector
	void SetKerBesselVector(float *ker_bessel_Vector, int kerSize);

	// Set the output image size parameter
	void SetImgSize(int *imgSize);

	// Set the maskRadius parameter
	void SetMaskRadius(float *maskRadius);

	// Allocate all the required GPU arrays on each GPU and required CPU arrays
	void Projection_Initilize();

	// Run the forward projection CUDA kernel
	void Forward_Project();

	// Run the back projection CUDA kernel
	void Back_Project();

	// Check the parameters before launching the forward or back project CUDA kernels
	int ParameterChecking(
		std::vector<float *> gpuVol_Vector, std::vector<float *> gpuCASImgs_Vector,			 // Vector of GPU array pointers
		std::vector<float *> gpuCoordAxes_Vector, std::vector<float *> ker_bessel_Vector,	 // Vector of GPU array pointers
		// std::vector<cufftComplex *> gpuComplexImgs_Vector,									 // Vector of GPU array pointers
		// std::vector<cufftComplex *> gpuComplexImgs_Shifted_Vector,							 // Vector of GPU array pointers
		float *CASImgs_CPU_Pinned, float *coordAxes_CPU_Pinned,								 // Pointers to pinned CPU arrays for input / output
		int volSize, int imgSize, int nAxes, float maskRadius, int kerSize, float kerHWidth, // kernel Parameters and constants
		int numGPUs, int nStreams, int gridSize, int blockSize, int nBatches,				 // Streaming parameters
		std::vector<int> numAxesPerStream
	);
};

#endif